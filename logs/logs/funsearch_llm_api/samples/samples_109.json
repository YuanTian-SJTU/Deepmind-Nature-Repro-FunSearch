{"sample_order": 109, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    n_bins = len(bins)\n    priorities = np.zeros(n_bins)\n    \n    for i in range(n_bins):\n        if bins[i] >= item:\n            priorities[i] = 1.0\n        else:\n            priorities[i] = item / bins[i]\n            if item > bins[i] / 2:\n                priorities[i] *= 2.0\n            elif item > bins[i] / 5:\n                priorities[i] *= 1.5\n            else:\n                priorities[i] *= 1.2\n                \n            for j in range(i+1, n_bins):\n                if bins[j] >= item:\n                    priorities[i] += 1.0\n                elif bins[j] >= item/2:\n                    priorities[i] += 0.5\n                else:\n                    priorities[i] += 0.2\n                    \n    return priorities\n\n", "score": -212.75}