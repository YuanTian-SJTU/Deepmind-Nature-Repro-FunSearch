{"sample_order": 111, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n\n    num_bins = len(bins)\n    priorities = np.zeros(num_bins)\n    \n    for i in range(num_bins):\n        if bins[i] >= item:\n            priorities[i] = 1\n        else:\n            priority = 0\n            remaining_capacity = bins[i] - item\n            remaining_items = bins[i+1:]\n            \n            if remaining_capacity <= 0:\n                priorities[i] = 0\n                continue\n            \n            for remaining_item in remaining_items:\n                if remaining_item <= remaining_capacity:\n                    priorities[i] += 1\n                    remaining_capacity -= remaining_item\n                \n                else:\n                    for j in range(i+1, num_bins-1):\n                        if bins[j] >= remaining_capacity:\n                            priorities[i] += bins[j] / remaining_item\n                            break\n                        else:\n                            priorities[i] += 1\n                            remaining_capacity -= bins[j]\n\n            priorities[i] += remaining_capacity / remaining_item\n\n    return priorities\n\n", "score": -212.75}