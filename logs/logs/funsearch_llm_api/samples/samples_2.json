{"sample_order": 2, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i, bin in enumerate(bins):\n        if bin >= item:\n            priorities[i] = 1\n        else:\n            remaining_capacity = bin - item\n            remaining_items = bins[i+1:]\n            for remaining_item in remaining_items:\n                if remaining_item <= remaining_capacity:\n                    priorities[i] += 1\n                    remaining_capacity -= remaining_item\n                else:\n                    break\n    return priorities\n\n", "score": -212.75}