{"sample_order": 105, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = 0\n        else:\n            remaining_capacity = bins[i] - item\n            priority = 0\n            while item > remaining_capacity:\n                if item > bins[i] / 2:\n                    priority += 2\n                else:\n                    priority += 1\n                item -= remaining_capacity\n                remaining_capacity = min(2 * remaining_capacity, item)\n            priority += item / bins[i]\n            if priority > 3:\n                priorities[i] = 3\n            elif priority > 2:\n                priorities[i] = 2\n            elif priority > 1:\n                priorities[i] = 1\n            else:\n                priorities[i] = priority\n    return priorities\n\n", "score": -212.75}