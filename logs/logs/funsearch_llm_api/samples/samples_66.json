{"sample_order": 66, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v0`.\"\"\"\n    priorities = []\n    for bin_capacity in bins:\n        if bin_capacity >= item:\n            priority = 0\n        else:\n            remaining_capacity = bin_capacity\n            priority = 0\n            while item > remaining_capacity:\n                priority += 1\n                item -= remaining_capacity\n                remaining_capacity = min(2 * remaining_capacity, item)\n            priority += item / bin_capacity\n        priorities.append(priority)\n    return np.array(priorities)\n\n", "score": -212.75}