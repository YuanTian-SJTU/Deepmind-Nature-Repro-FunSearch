{"sample_order": 112, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins)\n    priorities = np.zeros(num_bins)\n\n    for i in range(num_bins):\n        if bins[i] >= item:\n            priorities[i] = 1\n        else:\n            remaining_capacity = bins[i] - item\n            remaining_items = bins[i+1:]\n\n            for remaining_item in remaining_items:\n                if remaining_item <= remaining_capacity:\n                    priorities[i] += 1\n                    remaining_capacity -= remaining_item\n                else:\n                    priorities[i] += remaining_capacity / remaining_item\n                    break\n\n    max_priority = np.max(priorities)\n\n    for i in range(num_bins):\n        if priorities[i] == max_priority:\n            priorities[i] += 1\n        else:\n            priorities[i] /= max_priority\n\n    return priorities\n\n", "score": -212.75}