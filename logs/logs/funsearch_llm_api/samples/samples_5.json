{"sample_order": 5, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    result = np.zeros_like(bins)\n    for i, bin_size in enumerate(bins):\n        if bin_size >= item:\n            result[i] = 1\n        else:\n            remaining_size = bin_size\n            priority = 0\n            while remaining_size > 0:\n                if item <= remaining_size:\n                    priority += item / bin_size\n                    break\n                else:\n                    priority += remaining_size / bin_size\n                    remaining_size -= item\n            result[i] = priority\n    return result\n\n", "score": -212.75}