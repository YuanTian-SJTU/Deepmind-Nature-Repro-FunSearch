{"sample_order": 11, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v0`.\"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(bins.shape[0]):\n        if bins[i] == 0:\n            priorities[i] = np.inf\n        else:\n            ratios = item / bins[i]\n            if ratios < 1:\n                priorities[i] = 1 / (1 - ratios)\n            elif ratios == 1:\n                priorities[i] = 0\n            else:\n                priorities[i] = 1 - ratios\n    return priorities\n\n", "score": -212.95}