{"sample_order": 129, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n\n    priorities = []\n    for bin_capacity in bins:\n        priority = 0\n        \n        if bin_capacity >= item: # If the bin capacity is greater than or equal to the item size\n            priority = 1\n        elif bin_capacity > 0: # If the bin capacity is greater than 0\n            remaining_space = bin_capacity - item\n            if remaining_space > 0: # If there is remaining space in the bin after adding the item\n                priority += 0.5 * (remaining_space / bin_capacity) # Prioritize bins with more remaining space\n            else: # If there is no remaining space in the bin after adding the item\n                priority -= 0.5 * (item / bin_capacity) # Prioritize bins where the item fits snugly\n            priority += 0.5 * (bin_capacity / np.sum(bins)) # Prioritize bins with larger capacities\n        else: # If the bin capacity is 0\n            priority -= 0.25 # Give a lower priority to these bins\n\n        priorities.append(priority) # Add the priority to the priorities list\n\n    return np.array(priorities) # Convert the priorities list to a numpy array and return it\n\n", "score": -212.75}