{"sample_order": 31, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v0`.\"\"\"\n    ratios = item / bins\n    log_ratios = np.log(ratios)\n    priorities = np.zeros_like(bins)\n    for i, ratio in enumerate(ratios):\n        if ratio < 1:\n            priorities[i] = -log_ratios[i]\n        elif ratio >= 1 and ratio < 2:\n            priorities[i] = -log_ratios[i] * 0.5\n        elif ratio >= 2 and ratio < 3:\n            priorities[i] = -log_ratios[i] * 0.3\n        else:\n            priorities[i] = -log_ratios[i] * 0.2\n    return priorities\n\n", "score": -236.2}