{"sample_order": 48, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    result = np.zeros_like(bins)\n    for i, bin_size in enumerate(bins):\n        if bin_size >= item:\n            result[i] = 1\n        else:\n            priority = 0\n            remaining_item = item\n            remaining_bin = bin_size\n            while remaining_item > 0 and remaining_bin > 0:\n                if remaining_item <= remaining_bin:\n                    priority += remaining_item / bin_size\n                    remaining_item = 0\n                else:\n                    priority += remaining_bin / bin_size\n                    remaining_item -= remaining_bin\n                    remaining_bin -= remaining_bin\n                \n            result[i] = priority\n    return result\n\n", "score": -212.75}