{"sample_order": 83, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    priorities = []\n    for i in range(len(bins)):\n        if bins[i] == 0:\n            priorities.append(0)\n        elif item > bins[i]:\n            priorities.append(1)\n        else:\n            priority = item / bins[i]\n            if priority < 0.5:\n                priority *= 2\n                if priority < 0.2:\n                    priority = 0.2\n            priorities.append(priority)\n            \n    mean_priority = np.mean(priorities)\n    adjusted_priorities = []\n    for priority in priorities:\n        if priority < mean_priority:\n            adjusted_priority = priority + 0.1\n            if adjusted_priority > 1:\n                adjusted_priority = 1\n        else:\n            adjusted_priority = priority - 0.1\n            if adjusted_priority < 0:\n                adjusted_priority = 0\n        adjusted_priorities.append(adjusted_priority)\n    \n    return np.array(adjusted_priorities)\n\n", "score": null}