{"sample_order": 50, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    priorities = np.zeros_like(bins)\n    for i, bin in enumerate(bins):\n        priority = 0\n        if bin >= item:\n            priority += 1\n        else:\n            priority -= 1\n        for j in range(i, len(bins)):\n            if bins[j] >= item:\n                priority += 1\n            else:\n                priority -= 1\n            if priority < 0:\n                priority = 0\n        priorities[i] = priority\n    return priorities\n\n", "score": -212.75}