{"sample_order": 32, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v0`.\"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = 1\n        else:\n            remaining_capacity = bins[i]\n            for j in range(i+1, len(bins)):\n                remaining_capacity += bins[j]\n                if remaining_capacity >= item:\n                    priorities[i] = 1 / (j - i + 1)\n                    break\n    return priorities\n\n", "score": -212.75}