{"sample_order": 20, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v0`.\"\"\"\n    priorities = np.zeros_like(bins, dtype=float)\n    for i, bin_size in enumerate(bins):\n        if bin_size >= item:\n            priorities[i] = 1.0\n        else:\n            remaining_space = bin_size - item\n            priority = abs(remaining_space) / bin_size\n            priorities[i] = priority\n    return priorities\n\n", "score": null}