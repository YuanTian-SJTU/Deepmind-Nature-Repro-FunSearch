{"sample_order": 65, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    priorities = np.zeros_like(bins)\n    for i, bin_capacity in enumerate(bins):\n        if bin_capacity >= item:\n            if bin_capacity == 0:\n                priorities[i] = 0\n            elif bin_capacity > item * 2:\n                priorities[i] = item / bin_capacity\n            else:\n                priorities[i] = 0.5\n        else:\n            if bin_capacity == 0:\n                priorities[i] = 0\n            elif bin_capacity < item / 2:\n                priorities[i] = 1.0 / (bin_capacity - item)\n            else:\n                priorities[i] = 0.75\n    return priorities\n\n", "score": -212.75}