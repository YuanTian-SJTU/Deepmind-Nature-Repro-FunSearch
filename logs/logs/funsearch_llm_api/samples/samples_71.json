{"sample_order": 71, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    priorities = []\n    \n    for i, bin_capacity in enumerate(bins):\n        if i % 2 == 0:\n            if bin_capacity == 0:\n                priorities.append(0)\n            elif item > bin_capacity:\n                priorities.append(0)\n            else:\n                priority = item / bin_capacity\n                priorities.append(priority)\n        else:\n            priority = bin_capacity / item\n            priorities.append(priority)\n    \n    return np.array(priorities)\n\n", "score": -491.8}