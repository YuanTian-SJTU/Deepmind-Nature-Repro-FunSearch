{"sample_order": 98, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if bins[i] == 0:\n            priorities[i] = 0\n        elif item > bins[i]:\n            priorities[i] = 1\n        else:\n            priorities[i] = item / bins[i]\n            \n    if np.count_nonzero(priorities) == 0:\n        priorities = np.ones_like(bins)\n    \n    if np.count_nonzero(priorities) > 0:\n        priorities = priorities / np.sum(priorities)\n    \n    return priorities\n\n", "score": null}