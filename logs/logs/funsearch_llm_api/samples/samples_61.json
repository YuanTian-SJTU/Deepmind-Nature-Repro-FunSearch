{"sample_order": 61, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    priorities = np.zeros(len(bins))\n    if item > np.max(bins):\n        return priorities\n    \n    for i in range(len(bins)):\n        priority = 0\n        if bins[i] >= item:\n            priority += 1 + (item / bins[i])\n            if item > np.mean(bins):\n                priority *= 1.5\n            else:\n                priority *= 1.2\n        else:\n            priority += -1 + (bins[i] / item)\n            if item > np.mean(bins):\n                priority *= 0.8\n            else:\n                priority *= 0.6\n        priorities[i] = priority\n    \n    return priorities\n\n", "score": -212.0}