{"sample_order": 89, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        remaining_capacity = bins[i]\n        priority = 0\n\n        if remaining_capacity >= item:\n            priorities[i] = priority\n            continue\n\n        while item > remaining_capacity:\n            priority += 1\n            item -= remaining_capacity\n            remaining_capacity += bins[i] / (2 ** priority)\n\n        priority += item / bins[i]\n        priorities[i] = priority\n\n    return priorities\n\n", "score": -212.75}