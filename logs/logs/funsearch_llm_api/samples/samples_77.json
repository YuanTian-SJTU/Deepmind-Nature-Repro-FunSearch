{"sample_order": 77, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v0`.\"\"\"\n\n    priorities = np.zeros_like(bins)\n\n    for i, bin_capacity in enumerate(bins):\n        if bin_capacity >= item:\n            priorities[i] = 0\n        else:\n            remaining_space = bin_capacity\n            filled_ratio = 0\n            priority = 0\n\n            while remaining_space < item:\n                filled_ratio += remaining_space / bin_capacity\n                priority += 1\n                remaining_space = bin_capacity - item + (filled_ratio * bin_capacity)\n\n            priorities[i] = priority\n    \n    return priorities\n\n", "score": -212.75}