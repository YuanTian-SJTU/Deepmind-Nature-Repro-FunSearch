{"sample_order": 94, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n\n    priorities = []\n    for bin_capacity in bins:\n        priority = 0\n        \n        if bin_capacity >= item:\n            priority = 1\n        elif bin_capacity > 0:\n            remaining_space = bin_capacity - item\n            if remaining_space > 0:\n                priority += 0.5 * (remaining_space / bin_capacity)\n            else:\n                priority -= 0.5 * (item / bin_capacity)\n            priority += 0.5 * (bin_capacity / np.sum(bins))\n        else:\n            priority -= 0.25\n\n        priorities.append(priority)\n\n    return np.array(priorities)\n\n", "score": -212.75}