{"sample_order": 57, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    priorities = []\n    for i in bins:\n        if i == 0:\n            priorities.append(0)\n        elif item < i:\n            ratio = item / i\n            if ratio > 0.5:\n                priority = np.exp(-(ratio**3))\n            else:\n                priority = -np.log(ratio)**3\n            priorities.append(priority)\n        else:\n            ratio = i / item\n            if ratio > 1.5:\n                priority = np.exp(-(ratio**4))\n            else:\n                priority = -np.log(ratio)**4\n            priorities.append(priority)\n    return np.array(priorities)\n\n", "score": -390.3}