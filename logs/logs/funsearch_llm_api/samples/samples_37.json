{"sample_order": 37, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v0`.\"\"\"\n    priorities = np.empty_like(bins)\n    for i, bin in enumerate(bins):\n        if item > bin:\n            priorities[i] = np.inf\n        else:\n            # Calculate the priority based on multiple conditions\n            if item == 0:\n                priorities[i] = 0\n            elif item < bin/2:\n                priorities[i] = item / (bin/2)\n            elif item >= bin/2 and item < bin:\n                priorities[i] = (bin - item) / (bin/2)\n            else:\n                priorities[i] = -np.log(item / bin)\n    return priorities\n\n", "score": -212.85}