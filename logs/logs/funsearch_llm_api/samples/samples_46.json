{"sample_order": 46, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    num_bins = len(bins)\n    priorities = np.zeros(num_bins)\n    \n    for i in range(num_bins):\n        if bins[i] >= item:\n            priorities[i] = 1\n        else:\n            remaining_space = bins[i]\n            priority = 0\n            \n            if remaining_space <= 0:\n                priorities[i] = 0\n            else:\n                while remaining_space > 0:\n                    if item <= remaining_space:\n                        priority += item / bins[i]\n                        remaining_space -= item\n                    else:\n                        priority += remaining_space / bins[i]\n                        remaining_space = 0\n                priorities[i] = priority\n    \n    return priorities\n\n", "score": -212.75}