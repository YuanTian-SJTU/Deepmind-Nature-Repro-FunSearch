{"sample_order": 69, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v0`.\"\"\"\n\n    priorities = np.zeros_like(bins)\n\n    for i in range(len(bins)):\n        if bins[i] >= item:\n            priorities[i] = 0\n        else:\n            remaining_space = bins[i] - item\n            space_ratio = remaining_space / bins[i]\n            priority = np.log(space_ratio)\n            priorities[i] = priority\n\n    return priorities\n\n", "score": -212.75}