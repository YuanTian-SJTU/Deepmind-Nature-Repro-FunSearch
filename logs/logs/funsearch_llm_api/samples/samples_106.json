{"sample_order": 106, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    n_bins = len(bins)\n    priorities = np.zeros(n_bins)\n    for i in range(n_bins):\n        # Calculate the priority based on bin capacity and item size\n        if bins[i] >= item:\n            priorities[i] = 1.0\n        else:\n            priority = item / bins[i]\n            if priority > 1.0:\n                priorities[i] = priority * 2.0\n            elif priority > 0.5:\n                priorities[i] = priority * 1.5\n            else:\n                priorities[i] = priority * 1.2\n        \n        # Adjust priority based on neighboring bins\n        for j in range(i, n_bins):\n            if bins[j] >= item:\n                priorities[i] += 0.5\n            else:\n                priorities[i] -= 0.5\n        \n        # Limit priority to a maximum value\n        priorities[i] = min(priorities[i], 5.0)\n    \n    return priorities\n\n", "score": -212.75}