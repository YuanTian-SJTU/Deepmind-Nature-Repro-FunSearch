{"sample_order": 131, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    priorities = []\n    for bin_capacity in bins:\n        if bin_capacity == 0:\n            priorities.append(0)\n        elif item > bin_capacity:\n            priorities.append(0)\n        else:\n            priority = item / bin_capacity\n            if priority > 0.5:\n                if priority > 0.8:\n                    priorities.append(priority)\n                else:\n                    priorities.append(priority * 1.5)\n            else:\n                if item < 0.2 * bin_capacity:\n                    priorities.append(priority * 0.5)\n                else:\n                    priorities.append(priority)\n    return np.array(priorities)\n\n", "score": -215.1}