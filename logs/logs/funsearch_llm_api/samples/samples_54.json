{"sample_order": 54, "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    \"\"\"Improved version of `priority_v1`.\"\"\"\n    priorities = []\n    for i in bins:\n        if i == 0:\n            priorities.append(0)\n        else:\n            ratio = item / i\n            if ratio > 1:\n                priority = np.exp(-(ratio**2))\n            else:\n                priority = -np.log(ratio)**2\n            priorities.append(priority)\n    \n    # Apply custom weights to priorities\n    weighted_priorities = []\n    for i in range(len(priorities)):\n        if i % 2 == 0:\n            weighted_priorities.append(2 * priorities[i])\n        else:\n            weighted_priorities.append(3 * priorities[i])\n    \n    # Normalize priorities\n    normalized_priorities = []\n    total_priority = sum(weighted_priorities)\n    for priority in weighted_priorities:\n        normalized_priorities.append(priority / total_priority)\n    \n    return np.array(normalized_priorities)\n\n", "score": -493.1}